# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server:
    build:
      context: .
    environment:
      SERVER_HOST: server
      NODE_ENV: production
      MYSQL_HOST: db
    ports:
      - 8080:8080

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
    depends_on:
      db:
        condition: service_healthy
  db:
    image: mysql:8.0
    # restart: always
    # user: root
    # secrets:
    #   - db-password
    volumes:
      - db-data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: test
      MYSQL_DATABASE: pbl
    expose:
      - 3306
    ports:
      - 3306:3306
    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u root --password=test
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 40
volumes:
  db-data:
# secrets:
#   db-password:
#     file: db/password.txt

